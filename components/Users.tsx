import React, { useState } from 'react';
import { useAppContext } from '../context/AppContext';
import { User } from '../types';
import Modal from './ui/Modal';
import { PlusIcon, EditIcon, DeleteIcon } from './icons';
import { api } from '../services/api';

const UserForm: React.FC<{ user?: User; onSave: (user: User | Omit<User, 'id' | 'joinDate'>) => void; onCancel: () => void; isSaving: boolean; }> = ({ user, onSave, onCancel, isSaving }) => {
    const { state } = useAppContext();
    const [name, setName] = useState(user?.name || '');
    const [email, setEmail] = useState(user?.email || '');
    const [planId, setPlanId] = useState(user?.planId || '');
    const [status, setStatus] = useState<'active' | 'inactive' | 'pending'>(user?.status || 'pending');

    const handleSubmit = (e: React.FormEvent) => {
        e.preventDefault();
        const userData = {
            id: user?.id,
            name,
            email,
            planId: planId || null,
            status,
            joinDate: user?.joinDate,
        };
        // If it's an existing user, we pass the full object. Otherwise, we omit fields generated by the server.
        if (user) {
            onSave(userData as User);
        } else {
            const { id, joinDate, ...newUserPayload } = userData;
            onSave(newUserPayload);
        }
    };

    return (
        <form onSubmit={handleSubmit} className="space-y-4">
            <div>
                <label className="block text-sm font-medium text-slate-700 dark:text-slate-300">Full Name</label>
                <input type="text" value={name} onChange={(e) => setName(e.target.value)} required className="mt-1 block w-full px-3 py-2 bg-white dark:bg-slate-700 border border-slate-300 dark:border-slate-600 rounded-md shadow-sm focus:outline-none focus:ring-indigo-500 focus:border-indigo-500" />
            </div>
            <div>
                <label className="block text-sm font-medium text-slate-700 dark:text-slate-300">Email</label>
                <input type="email" value={email} onChange={(e) => setEmail(e.target.value)} required className="mt-1 block w-full px-3 py-2 bg-white dark:bg-slate-700 border border-slate-300 dark:border-slate-600 rounded-md shadow-sm focus:outline-none focus:ring-indigo-500 focus:border-indigo-500" />
            </div>
            <div>
                <label className="block text-sm font-medium text-slate-700 dark:text-slate-300">WiFi Plan</label>
                <select value={planId || ''} onChange={(e) => setPlanId(e.target.value)} className="mt-1 block w-full px-3 py-2 bg-white dark:bg-slate-700 border border-slate-300 dark:border-slate-600 rounded-md shadow-sm focus:outline-none focus:ring-indigo-500 focus:border-indigo-500">
                    <option value="">No Plan</option>
                    {state.products.map(p => <option key={p.id} value={p.id}>{p.name}</option>)}
                </select>
            </div>
            <div>
                <label className="block text-sm font-medium text-slate-700 dark:text-slate-300">Status</label>
                <select value={status} onChange={(e) => setStatus(e.target.value as any)} className="mt-1 block w-full px-3 py-2 bg-white dark:bg-slate-700 border border-slate-300 dark:border-slate-600 rounded-md shadow-sm focus:outline-none focus:ring-indigo-500 focus:border-indigo-500">
                    <option value="active">Active</option>
                    <option value="inactive">Inactive</option>
                    <option value="pending">Pending</option>
                </select>
            </div>
            <div className="flex justify-end space-x-2 pt-4">
                <button type="button" onClick={onCancel} className="px-4 py-2 bg-slate-200 dark:bg-slate-600 text-slate-800 dark:text-slate-100 rounded-md hover:bg-slate-300 dark:hover:bg-slate-500">Cancel</button>
                <button type="submit" disabled={isSaving} className="px-4 py-2 bg-indigo-600 text-white rounded-md hover:bg-indigo-700 disabled:opacity-50 disabled:cursor-not-allowed">
                    {isSaving ? 'Saving...' : 'Save User'}
                </button>
            </div>
        </form>
    );
};


const Users: React.FC = () => {
    const { state, dispatch } = useAppContext();
    const [isModalOpen, setIsModalOpen] = useState(false);
    const [isSaving, setIsSaving] = useState(false);
    const [editingUser, setEditingUser] = useState<User | undefined>(undefined);

    const handleOpenModal = (user?: User) => {
        setEditingUser(user);
        setIsModalOpen(true);
    };

    const handleCloseModal = () => {
        setEditingUser(undefined);
        setIsModalOpen(false);
    };

    const handleSaveUser = async (userData: User | Omit<User, 'id' | 'joinDate'>) => {
        setIsSaving(true);
        try {
            if ('id' in userData && userData.id) {
                const updatedUser = await api.updateUser(userData as User);
                dispatch({ type: 'UPDATE_USER', payload: updatedUser });
            } else {
                const newUser = await api.addUser(userData as Omit<User, 'id' | 'joinDate'>);
                dispatch({ type: 'ADD_USER', payload: newUser });
            }
            handleCloseModal();
        } catch (error) {
            console.error("Failed to save user:", error);
        } finally {
            setIsSaving(false);
        }
    };

    const handleDeleteUser = async (userId: string) => {
        if (window.confirm('Are you sure you want to delete this user?')) {
            try {
                await api.deleteUser(userId);
                dispatch({ type: 'DELETE_USER', payload: userId });
            } catch (error) {
                console.error("Failed to delete user:", error);
            }
        }
    };

    const getStatusBadge = (status: string) => {
        switch (status) {
            case 'active':
                return 'bg-green-100 text-green-800 dark:bg-green-900 dark:text-green-300';
            case 'inactive':
                return 'bg-red-100 text-red-800 dark:bg-red-900 dark:text-red-300';
            case 'pending':
                return 'bg-yellow-100 text-yellow-800 dark:bg-yellow-900 dark:text-yellow-300';
            default:
                return 'bg-slate-100 text-slate-800 dark:bg-slate-700 dark:text-slate-300';
        }
    };

    return (
        <div>
            <div className="flex justify-end mb-4">
                <button onClick={() => handleOpenModal()} className="flex items-center px-4 py-2 bg-indigo-600 text-white rounded-md hover:bg-indigo-700 shadow-lg">
                    <PlusIcon className="h-5 w-5 mr-2" />
                    Add User
                </button>
            </div>

            {/* Mobile View - Cards */}
            <div className="md:hidden space-y-4">
                {state.users.map(user => (
                    <div key={user.id} className="bg-white dark:bg-slate-800 shadow-md rounded-lg p-4">
                        <div className="flex justify-between items-start">
                             <div>
                                <p className="font-bold text-slate-900 dark:text-white">{user.name}</p>
                                <p className="text-sm text-slate-500">{user.email}</p>
                            </div>
                            <span className={`px-2 py-1 text-xs font-medium rounded-full ${getStatusBadge(user.status)}`}>
                                {user.status}
                            </span>
                        </div>
                        <div className="mt-4 pt-4 border-t dark:border-slate-700 flex justify-between items-center text-sm">
                             <div>
                                <p><span className="font-semibold">Plan:</span> {state.products.find(p => p.id === user.planId)?.name || 'N/A'}</p>
                                <p><span className="font-semibold">Joined:</span> {user.joinDate}</p>
                            </div>
                            <div className="flex items-center space-x-2">
                                <button onClick={() => handleOpenModal(user)} className="p-2 text-blue-600 hover:bg-slate-100 dark:hover:bg-slate-700 rounded-full"><EditIcon className="h-5 w-5" /></button>
                                <button onClick={() => handleDeleteUser(user.id)} className="p-2 text-red-600 hover:bg-slate-100 dark:hover:bg-slate-700 rounded-full"><DeleteIcon className="h-5 w-5" /></button>
                            </div>
                        </div>
                    </div>
                ))}
            </div>

            {/* Desktop View - Table */}
            <div className="hidden md:block bg-white dark:bg-slate-800 shadow-md rounded-lg overflow-x-auto">
                <table className="w-full text-sm text-left text-slate-500 dark:text-slate-400">
                    <thead className="text-xs text-slate-700 uppercase bg-slate-50 dark:bg-slate-700 dark:text-slate-400">
                        <tr>
                            <th scope="col" className="px-6 py-3">Name</th>
                            <th scope="col" className="px-6 py-3">Status</th>
                            <th scope="col" className="px-6 py-3">Plan</th>
                            <th scope="col" className="px-6 py-3">Join Date</th>
                            <th scope="col" className="px-6 py-3">Actions</th>
                        </tr>
                    </thead>
                    <tbody>
                        {state.users.map(user => (
                            <tr key={user.id} className="bg-white dark:bg-slate-800 border-b dark:border-slate-700 hover:bg-slate-50 dark:hover:bg-slate-600">
                                <td className="px-6 py-4 font-medium text-slate-900 dark:text-white whitespace-nowrap">{user.name} <div className="text-xs text-slate-500">{user.email}</div></td>
                                <td className="px-6 py-4">
                                    <span className={`px-2 py-1 text-xs font-medium rounded-full ${getStatusBadge(user.status)}`}>
                                        {user.status}
                                    </span>
                                </td>
                                <td className="px-6 py-4">{state.products.find(p => p.id === user.planId)?.name || 'N/A'}</td>
                                <td className="px-6 py-4">{user.joinDate}</td>
                                <td className="px-6 py-4 flex items-center space-x-2">
                                    <button onClick={() => handleOpenModal(user)} className="p-1 text-blue-600 hover:text-blue-800 dark:text-blue-400 dark:hover:text-blue-300"><EditIcon className="h-5 w-5" /></button>
                                    <button onClick={() => handleDeleteUser(user.id)} className="p-1 text-red-600 hover:text-red-800 dark:text-red-400 dark:hover:text-red-300"><DeleteIcon className="h-5 w-5" /></button>
                                </td>
                            </tr>
                        ))}
                    </tbody>
                </table>
            </div>

            <Modal isOpen={isModalOpen} onClose={handleCloseModal} title={editingUser ? 'Edit User' : 'Add New User'}>
                <UserForm user={editingUser} onSave={handleSaveUser} onCancel={handleCloseModal} isSaving={isSaving} />
            </Modal>
        </div>
    );
};

export default Users;
